<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd


    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd

    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

    <!-- 引入属性资源文件 -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:config/*.properties</value>
            </list>
        </property>
    </bean>
    
    <!-- HandlerExceptionResolver可以处理全局异常，配置简便。但请注意，该方法处理异常的匹配优先级最低。 -->
    <bean class="cn.com.sparknet.common.exception.ExceptionResolver"/>

    <import resource="classpath:applicationContext-Task.xml"/>

    <!-- 自动扫描且排除扫描@Controller -->
    <context:component-scan base-package="cn.com.sparknet.**">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="defaultDataSource"></property>
    </bean>

    <!-- 配置默认的DataSource -->
    <bean id="defaultDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <property name="name" value="defaultDataSource"/>
        <property name="url" value="${common.db.url}"/>
        <property name="username" value="${common.db.username}"/>
        <property name="password" value="${common.db.password}"/>

        <!-- 配置最小连接数、最大连接数、初始化连接数 -->
        <property name="minIdle" value="10"/>
        <property name="maxActive" value="200"/>
        <property name="initialSize" value="10"/>

        <!-- 配置获取连接等待超时的时间，单位毫秒 -->
        <property name="maxWait" value="60000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <!-- 检测连接是否可用 -->
        <property name="validationQuery" value="${common.db.validationQuery}"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        <!-- 打开PSCache，并指定每个连接的PSCache大小 -->
        <property name="poolPreparedStatements" value="${common.db.poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="${common.db.maxPoolPreparedStatementPerConnectionSize}"/>

        <!-- 配置监控统计拦截的filters，用于监控SQL统计 -->
        <property name="filters" value="stat"/>
    </bean>

    <!-- 配置多数据源切换路由 -->
    <bean id="route" class="cn.com.sparknet.common.dao.DynamicDataSource">
        <property name="defaultTargetDataSource" ref="defaultDataSource"/>
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <!-- <entry key="otherDataSource" value-ref="otherDataSource"/> -->
            </map>
        </property>
    </bean>

    <!-- 配置SessionFactory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="packagesToScan" value="cn.com.sparknet.*"/>
        <property name="dataSource" ref="route"/>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.show_sql">${common.db.showSql}</prop>
                <prop key="hibernate.format_sql">${common.db.formatSql}</prop>
                <prop key="hibernate.dialect">${common.db.dialect}</prop>
                <prop key="hibernate.current_session_context_class">
                    org.springframework.orm.hibernate4.SpringSessionContext
                </prop>
            </props>
        </property>
    </bean>
    <!--  加载jdbcTemplate-->
    <!-- <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <constructor-arg name="dataSource" ref="defaultDataSource"></constructor-arg>
   </bean> -->

    <!-- 开启AOP监听 只对当前配置文件有效 -->
    <aop:aspectj-autoproxy expose-proxy="true"/>
    <!-- 开启注解事务 只对当前配置文件有效 -->
    <tx:annotation-driven transaction-manager="txManager"/>
    <!--事务管理 -->
    <bean id="txManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="login*" propagation="REQUIRED"/>
            <tx:method name="create*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="submit*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="modify*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="remove*" propagation="REQUIRED"/>
            <tx:method name="copy*" propagation="REQUIRED"/>
            <tx:method name="deploy*" propagation="REQUIRED"/>
            <tx:method name="execute*" propagation="REQUIRED"/>
            <tx:method name="destroy*" propagation="REQUIRED"/>
            <tx:method name="get*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="load*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="find*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="query*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <aop:config expose-proxy="true">
        <aop:pointcut id="txPointcut" expression="execution(* cn.com.sparknet..service.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>

    <!-- 启动JSON格式的配置 -->
    <bean id="mappingJackson2HttpMessageConverter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>application/json;charset=UTF-8</value>
                <value>text/html;charset=UTF-8</value>
            </list>
        </property>
    </bean>
    <!--wuwt 后加   用于后台接受文件-->
    <!--<bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver">
        <property name="maxUploadSize" value="5120000"/>
    </bean>-->
</beans>